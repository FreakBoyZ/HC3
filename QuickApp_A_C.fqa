{"name":"QuickApp A/C","type":"com.fibaro.hvacSystemCool","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_298"},"sections":{"items":[]}},"head":{"title":"quickApp_device_298"}}},"uiCallbacks":[],"quickAppVariables":[],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"function QuickApp:onInit()\n    self:debug(\"onInit\")\n    self.ACmode = \"Cool\";\n    self.ACTemp = 25; \n    self.ZXTID = 293;\n\n    -- set supported modes for thermostat\n    self:updateProperty(\"supportedThermostatModes\", {\"Off\", \"Cool\", \"Auto\"})\n\n    -- setup default values\n    self:updateProperty(\"thermostatMode\", \"Cool\")\n    self:updateProperty(\"coolingThermostatSetpoint\", 23)\nend\n\n-- Thermostat cool should handle actions: setThermostatMode, setCoolingThermostatSetpoint\n-- Proeprties that should be updated:\n-- * supportedThermostatModes - array of modes supported by the thermostat eg. {\"Off\", \"Cool\"}\n-- * thermostatMode - current mode of the thermostat\n-- * coolingThermostatSetpoint - set point for cooling \n-- handle action for mode change \nfunction QuickApp:setThermostatMode(mode)\n    self:updateProperty(\"thermostatMode\", mode)\n    self:debug(\"Current Mode : \" .. mode)\n    self.ACmode = mode;\n    fibaro.call(self.ZXTID, \"setThermostatMode\", self.ACmode)\n    fibaro.call(self.ZXTID, \"setCoolingThermostatSetpoint\", self.ACTemp)\n\nend\n\n-- handle action for setting set point for cooling\nfunction QuickApp:setCoolingThermostatSetpoint(value) \n    self:updateProperty(\"coolingThermostatSetpoint\", value)\n    print(\"ZXT ID : \" .. self.ZXTID)\n    self:debug(\"Current Temp : \" .. value)\n    self:debug(\"Set Mode : \" .. self.ACmode);\n    self.ACTemp = value;\n    \n    fibaro.call(self.ZXTID, \"setThermostatMode\", self.ACmode)\n    fibaro.call(self.ZXTID, \"setCoolingThermostatSetpoint\", value)\n\n\n\n    --fibaro.call(1212, 0 1 , 25)\nend\n\n-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  \n-- self:updateView(\"slider\", \"value\", \"55\") \n-- self:updateView(\"button1\", \"text\", \"MUTE\") \n-- self:updateView(\"label\", \"text\", \"TURNED ON\") \n\n-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). \n-- Here you can set some default values, setup http connection or get QuickApp variables.\n-- To learn more, please visit: \n--    * https://manuals.fibaro.com/home-center-3/\n--    * https://manuals.fibaro.com/home-center-3-quick-apps/\n\n\n"}]}